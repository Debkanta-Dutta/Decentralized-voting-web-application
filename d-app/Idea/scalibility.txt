import mongoose from "mongoose";

const votingTopicSchema = new mongoose.Schema({
  votingTopicId: {
    type: String,
    required: true,
  },
  voterId: {
    type: String,
    required: true,
  },
  isRegistered: {
    type: Boolean,
    default: false,
  },
  isVerified: {
    type: Boolean,
    default: false,
  },
  hasVoted: {
    type: Boolean,
    default: false,
  },
  votingPermission: {
    type: Boolean,
    default: false,
  },
  votedTo: {
    type: String,
  },
  verifiedAt: {
    type: Date,
  },
  votedAt: {
    type: Date,
  },
});

const voterSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Types.ObjectId,
      ref: "User",
      required: true,
      unique: true, // One voter record per user
    },
    votingTopics: {
      type: [votingTopicSchema],
      default: [],
    },
  },
  { timestamps: true }
);

voterSchema.index({ userId: 1 });
voterSchema.index({ "votingTopics.votingTopicId": 1 });
voterSchema.index({ "votingTopics.voterId": 1 });
voterSchema.index({ "votingTopics.isVerified": 1, "votingTopics.hasVoted": 1 });

export const Voter = mongoose.model("Voter", voterSchema);



 ---------------------------------------------------------------------------


 import mongoose from "mongoose";

const topicCandidacySchema = new mongoose.Schema(
  {
    candidateId: {
      type: String, // e.g., "pres2025-C001"
      required: true,
      unique:true
    },
    votingTopicId: {
      type: String,
      required: true,
    },
    party: {
      type: String,
      required: true,
    },
    bio: {
      type: String,
    },
    voteCount: {
      type: Number,
      default: 0,
    },
    isApproved: {
      type: Boolean,
      default: false,
    },
    approvedAt: {
      type: Date,
    },
  },
  { _id: false }
);

const candidateSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Types.ObjectId,
      ref: "User",
      required: true,
      unique: true,
    },
    candidacies: {
      type: [topicCandidacySchema],
      default: [],
    },
  },
  { timestamps: true }
);

// Optional: index for searching candidacies by topic
candidateSchema.index({ "candidacies.votingTopicId": 1 });
candidateSchema.index({ "candidacies.candidateId": 1 }, { unique: true });

export const Candidate = mongoose.model("Candidate", candidateSchema);



--------------------------------------------------------------------------------



import mongoose from "mongoose";

const voteEntrySchema = new mongoose.Schema(
  {
    votingTopicId: {
      type: String,
      required: true,
      index: true,
    },
    topicName: {
      type: String,
    },
    votedTo: {
      type: String, // changed from Number to String for better cross-chain or formatted IDs
      required: true,
    },
    candidateName: {
      type: String,
    },
    voteCountAtTime: {
      type: Number,
    },
    votedAt: {
      type: Date,
      default: Date.now,
    },
  },
  { _id: false }
);

const votingHistorySchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Types.ObjectId,
      ref: "User",
      required: true,
      unique: true,
      index: true,
    },
    history: {
      type: [voteEntrySchema],
      default: [],
    },
  },
  { timestamps: true }
);

export const VotingHistory = mongoose.model(
  "VotingHistory",
  votingHistorySchema
);
------------------------------------------------------------------ previous part ------------------------------------
import mongoose from "mongoose";

const voterSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Types.ObjectId,
      ref: "User",
    },
    voterId: {
      type: String,
      unique: true,
    },
    votingTopicId: {
      type: String,
      required: true,
    },
    isRegistered: {
      type: Boolean,
      default: false,
    },
    isVerified: {
      type: Boolean,
      default: false,
    },
    hasVoted: {
      type: Boolean,
      default: false,
    },
    votingPermission: {
      type: Boolean,
      default: false,
    },
    votedTo: {
      type: Number,
    },
    verifiedAt: Date,
    votedAt: Date,
  },
  { timestamps: true }
);
voterSchema.index({ userId: 1, votingTopicId: 1 }, { unique: true });
export const Voter = mongoose.model("Voter", voterSchema);
---------------------------------------------------------------------
import mongoose from "mongoose";

const candidateSchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Types.ObjectId,
      ref: "User",
    },
    candidateId: {
      type: Number,
    },
    party: {
      type: String,
      required: true,
    },
    voteCount: {
      type: Number,
      default: 0,
    },
    isApproved: {
      type: Boolean,
      default: false,
    },
    votingTopicId: {
      type: String,
      required: true,
    },
    bio: String,
  },
  { timestamps: true }
);

export const Candidate = mongoose.model("Candidate", candidateSchema);
-------------------------------------------------------------------------------------
import mongoose from "mongoose";

const votingHistorySchema = new mongoose.Schema(
  {
    userId: {
      type: mongoose.Types.ObjectId,
      ref: "User",
      required: true,
    },
    history: [
      {
        votingTopicId: {
          type: String,
          required: true,
        },
        topicName: {
          type: String,
        },
        votedTo: {
          type: Number,
        },
        votedAt: {
          type: Date,
          default: Date.now,
        },
      },
    ],
  },
  { timestamps: true }
);

export const VotingHistory = mongoose.model(
  "VotingHistory",
  votingHistorySchema
);
